.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


.dashboard {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 20px;
  }
  
  .card {
    background-color: #f5f5f5;
    border-radius: 8px;
    padding: 20px;
  }
  
  .card h2 {
    font-size: 18px;
    margin-bottom: 10px;
  }
  
  .card p {
    font-size: 24px;
    font-weight: bold;
  }
  import "./Dashboard.css";

function Dashboard() {
  const [totalSales, setTotalSales] = useState(0);
  const [totalCashSales, setTotalCashSales] = useState(0);
  const [totalCreditSales, setTotalCreditSales] = useState(0);
  const [mostSalesBuyer, setMostSalesBuyer] = useState({ buyerName: "", saleTotal: 0 });

  useEffect(() => {
    const fetchSales = async () => {
      const sales = await getSalesData();
      setTotalSales(calculateTotalSales(sales));
      setTotalCashSales(calculateTotalCashSale(sales));
      setTotalCreditSales(calculateTotalCreditSale(sales));
      setMostSalesBuyer(calculateBuyerWithMostSale(sales));
    };

    fetchSales();
  }, []);

  return (
    <div className="dashboard">
      <div className="card">
        <h2>Total Sales</h2>
        <p>{totalSales}</p>
      </div>
      <div className="card">
        <h2>Total Cash Sales</h2>
        <p>{totalCashSales}</p>
      </div>
      <div className="card">
        <h2>Total Credit Sales</h2>
        <p>{totalCreditSales}</p>
      </div>
      <div className="card">
        <h2>Buyer with Most Sales</h2>
        <p>{mostSalesBuyer.buyerName}</p>
        <p>{mostSalesBuyer.saleTotal}</p>
      </div>
    </div>
  );
}

export default Dashboard;

import axios from "axios";

export const getSalesData = async () => {
  let { data } = await axios.get(`/sales.json`);
  return data;
};

export const calculateTotalSales = (sales) => {
  return sales.reduce((total, sale) => total + sale.saleTotal, 0);
};

export const calculateTotalCashSale = (sales) => {
  return sales
    .filter((sale) => !sale.creditCard)
    .reduce((total, sale) => total + sale.saleTotal, 0);
};

export const calculateTotalCreditSale = (sales) => {
  return sales
    .filter((sale) => sale.creditCard)
    .reduce((total, sale) => total + sale.saleTotal, 0);
};

export const calculateBuyerWithMostSale = (sales) => {
  const buyerSales = sales.reduce((acc, sale) => {
    acc[sale.buyerName] = (acc[sale.buyerName] || 0) + sale.saleTotal;
    return acc;
  }, {});

  const topBuyer = Object.entries(buyerSales).reduce((max, [buyer, total]) => {
    return total > max.saleTotal ? { buyerName: buyer, saleTotal: total } : max;
  }, { buyerName: "", saleTotal: 0 });

  return topBuyer;
};
